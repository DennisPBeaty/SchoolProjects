I. Create an interface named Queue with the following methods:

void push(Object o): appends an object to the back of the queue
Object pop(): removes and returns an object from the front of the queue; if the queue is empty it returns null
Object peek(): returns an object from the front of the queue without removing it
void loop(): take the object at the front of the queue and place it at the end of the queue
boolean isEmpty(): returns true if the queue is empty and false otherwise
int length(): return the number of elements in the queue
 II.  Create a class called ArrayQueue that implements a queue.

 It should use an ArrayList from the java.util library to implement the queue.
III.  Create a class called LinkListQueue that implements a queue.

It should contain an object of type Node.
Nodes should contain an Object called data and a Node called next
The nodes should be used to implement the queue.
IV.  Use a try-catch block to sort the data into the correct Queue:  place integers into the ArrayQueue, and non-integers into the LinkListQueue.

 V.  Print the following to the terminal with the appropriate number of integers and non-integers found in RandomNumbers.txt:

Number of Integers: <Value>

Number of Non-Integers: <Value>

 VI.  The output.txt file should be created by doing the following:

 Until the ArrayQueue is empty:

Call the loop function on the ArrayQueue the number of times equal to the sum of the digits in the value returned by the peek function of ArrayQueue
Pop the ArrayQueue and call the loop function on the LinkListQueue one-thousandth that many times (rounded down)
Call the peek function on the LinkListQueue and write that value to output.txt on its own line
Pop the ArrayQueue the number of times equal to the number of times you have completed this process plus one. (Donâ€™t write these values to output.txt. The first time through pop once, the second pop twice, etc,etc)
Your submission should include your program, not the output.txt file nor the RandomNumbers.txt file.  You will be graded on correctly implementing the Queue interface, ArrayQueue class, LinkedListQueue class, and try-catch block along with printing the number of integers and non-integers and the correctness of the output.txt file generated by your program.

Don't forget to put your name and netId in a comment at the top of your InterfaceQueue.java file.  Please submit a jar file named, InterfaceQueue.jar, containing your java source code file(s) and any class file(s). A sample execution of your program might be:

java -jar InterfaceQueue.jar

 

Below are some tools to help ensure you are creating your output file correctly; sample.output.txt contains the first 5 lines of output and matches the expected output of your program. Take note of the newline that is added after the fifth entry, your output.txt should also contain that newline or outputchecker.py will tell you your output is incorrect.

outputchecker.py will read in the file passed to it (in this case, your output.txt) and hash its contents. It will inform you of 2 possible results:
1) The file matches the stored hash of the sample.output.txt file.

2) The file matches the stored hash of the complete output.txt file.

When using these tools, first try and have your program create a copy of sample.output.txt, by limiting the loop to only run 5 times; if your output matches, your program should be able to generate a matching output.txt with no problem.

outputchecker.py  Download outputchecker.py 

sample.output.txt  Download sample.output.txt 

 